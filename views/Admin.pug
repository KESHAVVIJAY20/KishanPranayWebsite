doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  title Kishan Pranay - Futurist and Innovation Adviser
  link(rel="stylesheet", href="admin-responsive.css")
  link(rel='stylesheet' href='admin.css')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous')
  script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js' integrity='sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css')
  script(src='https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js')
  script(src="https://code.jquery.com/jquery-3.6.0.min.js")

  script.
    document.addEventListener('DOMContentLoaded', function() {
      AOS.init(
        {
          offset:200,
        }
      );
    }); 
    function truncateUrl(url, maxLength) {
      if (url.length > maxLength) {
        return url.substring(0, maxLength - 3) + '...';
      }
      return url;
    }
    //- const longUrl = 'https://www.example.com/some/really/long/url/that/needs/to/be/truncated';
    //- const truncatedUrl = truncateUrl(longUrl, 30);
    //- console.log(truncatedUrl); 
body 
  .sidebar(data-aos='fade-up')
    h3(data-aos='zoom-in').mb-5 Kishan Pranay&apos;s Dashboard
    a.p-3(href='#' data-section='dashboard') 
      img.w-25.h-25.pe-1(src="./svg/home.svg") 
      |  Dashboard
    a.p-3(href='#' data-section='users') 
      img.w-25.h-25.pe-1(src="./svg/users.svg")
      |  Users
    a.p-3(href='#' data-section='products') 
      img.w-25.h-25.pe-1(src="./svg/book.svg")
      |  Books
      

  .content
    //- nav.navbar.navbar-expand-lg.navbar-light.bg-light
      //- .container-fluid
      //-   a.navbar-brand(href='#') Dashboard
    .container.mt-4
      #dashboard.section.active
        h2.fs-1.font-monospace Dashboard
        p Welcome to the admin dashboard.
        .container.mt-4
          .row
            .col-md-3(data-aos='zoom-in')
              .card.text-white.bg-primary.mb-3
                .card-body
                  h5.card-title Total Users
                  p.card-text.fs-1 #{users.length}
                  //- p.card-text Manage Users here.
            .col-md-3(data-aos='zoom-in')
              .card.text-white.bg-success.mb-3
                .card-body
                  h5.card-title Total Books
                  p.card-text.fs-1 #{books.length}

      #users.section
        h2.text-center.fs-1 Users
        table.border.text-center.d-flex-col.mx-auto
          thead.border
            tr
              th Date Joined
              th Username
              th Usermail
          tbody 
            if Array.isArray(users) && users.length > 0
              each user in users
                tr.border-bottom
                  td.p-3= new Date(user.dateJoined).toLocaleDateString()
                  td.p-3= user.Username
                  td.p-3= user.Usermail
                  td.p-3
                    button.m-1(data-id=user._id, class="btn btn-warning edit-btn") Edit
                    button(data-id=user._id, class="btn btn-danger delete-btn") Delete
            else
              tr
                td(colspan="2") No users found

      #products.section
        h1.text-center  BOOKS
        //- a.d-md-flex.justify-content-md-end.text-decoration-none(href="/admin/add-book") 
        button.m-1.me-md-2.AddNewBook( class="btn btn-outline-primary") + Add New Book
        table.border.text-center.d-flex-col.mx-auto.table
          thead.border
            tr
              th Date Of Creation
              th BookTitle
              th BookAuthor 
              th BookGenre 
              th BookDescription
              th BookCover 
          tbody 
            if Array.isArray(books) && books.length > 0
              each book in books
                tr.border-bottom
                  td.p-3= new Date(book.dateCreated).toLocaleDateString()
                  td.p-3= book.title
                  td.p-3= book.author
                  td.p-3= book.genre
                  td.p-3= book.description
                  td.p-3.truncate= book.cover
                  td.p-3
                    button.m-1(data-id=book._id, class="btn btn-warning editBook-btn") Edit
                    button.m-1(data-id=book._id, class="btn btn-danger deleteBook-btn", data-toggle="modal", data-target="#deleteBookModal") Delete            
                    //- button.btn.btn-danger(onclick=`deleteBook('${book._id}')`) Delete
            else
              tr
                td(colspan="2") No users found
      #orders.section
        h2 Orders
        p View and manage orders here.
      #reports.section
        h2 Reports
        p Generate and view reports here.
      #settings.section
        h2 Settings
        p Configure settings here.


    #editModal.modal.fade
      .modal-dialog
          .modal-content
            .modal-header
              h5.modal-title Edit User
              button(type="button", class="btn-close", data-bs-dismiss="modal", aria-label="Close")
            .modal-body
              form#editForm.text-center(method="POST")
                .form-floating.mb-2
                  input.form-control.me-2.rounded(type='text' id='Username' name='Username' aria-label='Full Name' placeholder='Full Name' required)
                  label(for='floatingTextarea') Full Name
                .form-floating
                  input.form-control.rounded(type='email' id='Usermail' name='Usermail' aria-label='Email' placeholder='Email Address' required  )
                  label(for='floatingTextarea') Email Address
                br
                input#submit.btn.bg-primary.text-white.ps-5.pe-5(type='submit' name='Submit')
    //- Edit Book Modal
    .modal#editBookModal(tabindex="-1" role="dialog")
      .modal-dialog(role="document")
        .modal-content
          .modal-header
            h5.modal-title Edit Book
            button(type="button", class="btn-close", data-bs-dismiss="modal", aria-label="Close")
          .modal-body
            .container
              form(method='POST')
                .form-group
                  label(for='title') Title
                  input#editBookTitle.form-control(type='text', name='title', required=true)
                .form-group
                  label(for='author') Author
                  input#editBookAuthor.form-control(type='text', name='author', required=true)
                .form-group
                  label(for='genre') Genre
                  input#editBookGenre.form-control(type='text', name='genre',required=true)
                .form-group
                  label(for='description') Description
                  textarea#editBookDescription.form-control(name='description', required=true)
                .form-group.mb-3
                  label(for='cover') Cover URL
                  input#editBookCover.form-control(type='text', name='cover',required=true)
                button.me-2(type="button", class="btn btn-secondary", data-bs-dismiss="modal") Close
                button.btn.btn-primary(type="submit" id='saveChangesBtn') Save changes

          //- div.modal-body
          //-   form
          //-     div.form-group
          //-       label(for="editBookTitle") Title
          //-       input.form-control(type="text" id="editBookTitle" required)
          //-     div.form-group
          //-       label(for="editBookAuthor") Author
          //-       input.form-control(type="text" id="editBookAuthor" required)
          //-     div.form-group
          //-       label(for="editBookDescription") Description
          //-       textarea.form-control(id="editBookDescription" required)
          //-     div.form-group
          //-       label(for="editBookGenre") Genre
          //-       input.form-control(type="text" id="editBookGenre" required)
          //-     div.form-group
          //-       label(for="editBookCover") Cover
          //-       input.form-control(type="text" id="editBookCover" required)
          //- div.modal-footer
          //-   button(type="button", class="btn btn-secondary", data-bs-dismiss="modal") Close
          //-   button.btn.btn-primary#saveChangesBtn(type="button") Save changes


    #AddBookModal.modal.fade
      .modal-dialog
        .modal-content
          .modal-header
            h5.modal-title Add New Book
            button(type="button", class="btn-close", data-bs-dismiss="modal", aria-label="Close")
          .modal-body
            .container
              form(action='/admin/add-book', method='POST')
                .form-group
                  label(for='title') Title
                  input#title.form-control(type='text', name='title', required=true)
                .form-group
                  label(for='author') Author
                  input#author.form-control(type='text', name='author', required=true)
                .form-group
                  label(for='genre') Genre
                  input#genre.form-control(type='text', name='genre',required=true)
                .form-group
                  label(for='description') Description
                  textarea#description.form-control(name='description', required=true)
                .form-group.mb-3
                  label(for='cover') Cover URL
                  input#cover.form-control(type='text', name='cover',required=true)
                button.btn.btn-primary(type='submit') Add Book

          .modal-footer
            button(type="button", class="btn btn-secondary", data-bs-dismiss="modal") Close
    
    #deleteModal.modal.fade.mt-5.pt-5
        .modal-dialog
          .modal-content
            .modal-header
              h5.modal-title Delete User
              button(type="button", class="btn-close", data-bs-dismiss="modal", aria-label="Close")
            .modal-body
              p.text-center Are you sure you want to delete this user?
              form#deleteForm.text-center(method="POST")
                input#deleteUserId(type="hidden", name="id")
                button.me-2(type="submit", class="btn btn-danger") Yes Delete
                button(type="button", class="btn btn-secondary" data-bs-dismiss="modal") Cancel

            //- .modal-footer
            //-   button(type="button", class="btn btn-secondary", data-bs-dismiss="modal") Close
    
    #deleteBookModal.modal.fade.mt-5.pt-5
        .modal-dialog
          .modal-content
            .modal-header
              h5.modal-title Delete Book
              button(type="button", class="btn-close", data-bs-dismiss="modal", aria-label="Close")
            .modal-body
              p.text-center Are you sure you want to delete this Book?
              form#deleteBookForm.text-center(method="POST")
                input#deleteBookId(type="hidden", name="id")
                button.me-2(type="submit", class="btn btn-danger" id="confirmDeleteBtn") Yes Delete
                button(type="button", class="btn btn-secondary" data-bs-dismiss="modal") Cancel

script(src='https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js')
script.
  document.querySelectorAll('.sidebar a').forEach(link => {
  link.addEventListener('click', function(event) {
  event.preventDefault();
  document.querySelectorAll('.section').forEach(section => {
  section.classList.remove('active');
  });
  const sectionId = this.getAttribute('data-section');
  document.getElementById(sectionId).classList.add('active');
  });
  });

script.
  $(document).ready(function() {
    $('.AddNewBook').click(function() {
      $('#AddBookModal').modal('show');
    });
    $('.delete-btn').click(function() {
      const userId = $(this).data('id');
      $('#deleteUserId').val(userId);
      $('#deleteModal').modal('show');
    });
    $('.deleteBook-btn').click(function() {
      const bookId = $(this).data('id');
      $('#deleteBookId').val(bookId);
      $('#deleteBookModal').modal('show');
    });

    // Delete user
    $('#deleteForm').submit(function(e) {
      e.preventDefault();
      const userId = $('#deleteUserId').val();
      $.ajax({
        url: `/admin/${userId}`,
        type: 'DELETE',
        success: function(result) {
          //- alert(result.message);
          $('#deleteModal').modal('hide');
          location.reload(); // Reload the page to update the list
        },
        error: function(xhr, status, error) {
          alert('Error deleting user');
        }
      });
    });
    

    // Edit user
    $('.edit-btn').click(function(e) {
      e.preventDefault();
      const userId = $(this).data('id');
      $.get(`/admin/${userId}`, function(user) {
        $('#editUsername').val(user.Username);
        $('#editUsermail').val(user.Usermail);
        $('#editForm').attr('action', `/admin/${userId}`);
        $('#editModal').modal('show');
      });
    });

    // Handle form submission for editing
    $('#editForm').submit(function(e) {
      e.preventDefault();
      const form = $(this);
      $.ajax({
        url: form.attr('action'),
        type: 'PUT',
        data: form.serialize(),
        success: function(result) {
          //- alert(result.message);
          $('#editModal').modal('hide');
          location.reload(); // Reload the page to update the list
        },
        error: function(xhr, status, error) {
          alert('Error updating user');
        }
      });
    });
  });
  function truncateUrl(url, maxLength) {
    if (url.length > maxLength) {
      return url.substring(0, maxLength - 3) + '...';
    }
    return url;
  }

  let bookIdToDelete = null;

  document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.deleteBook-btn').forEach(button => {
      button.addEventListener('click', function() {
        bookIdToDelete = this.getAttribute('data-id');
      });
    });

    document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
      if (bookIdToDelete) {
        fetch(`/admin/book/${bookIdToDelete}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
        })
        .then(response => response.json())
        .then(data => {
          if (data.message === 'Book deleted successfully') {
            // Remove the book row from the table
            document.querySelector(`button[data-id="${bookIdToDelete}"].deleteBook-btn`).closest('tr').remove();
            // Hide the modal
            $('#deleteBookModal').modal('hide');
          } else {
            alert('Failed to delete the book');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while deleting the book');
        });
      }
    });
  });
  document.addEventListener('DOMContentLoaded', function() {
    let bookIdToEdit = null;

    document.querySelectorAll('.editBook-btn').forEach(button => {
      button.addEventListener('click', function() {
        bookIdToEdit = this.getAttribute('data-id');
        console.log(`${bookIdToEdit}`)
        $('#editBookModal').modal('show');
        //- fetch(`/admin/book/${bookIdToEdit}`)
        //-   .then(response => {
        //-     if (!response.ok) {
        //-       throw new Error(`HTTP error! status: ${response.status}`);
        //-     }
        //-     return response.json();
        //-   })
        //-   .then(book => {
        //-     document.getElementById('editBookTitle').value = book.title;
        //-     document.getElementById('editBookAuthor').value = book.author;
        //-     document.getElementById('editBookDescription').value = book.description;
        //-     document.getElementById('editBookGenre').value = book.genre;
        //-     document.getElementById('editBookCover').value = book.cover;
        //-     $('#editBookModal').modal('show');
        //-   })
        //-   .catch(error => {
        //-     console.error('Error:', error);
        //-     alert('An error occurred while fetching the book details');
        //-   });
      });
    });

    document.getElementById('saveChangesBtn').addEventListener('click', function() {
      if (bookIdToEdit) {
        const title = document.getElementById('editBookTitle').value;
        const author = document.getElementById('editBookAuthor').value;
        const description = document.getElementById('editBookDescription').value;
        const genre = document.getElementById('editBookGenre').value;
        const cover = document.getElementById('editBookCover').value;

        fetch(`/admin/books/edit/${bookIdToEdit}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title, author, genre, description,  cover }),
        })
        .then(response => response.json())
        .then(data => {
          if (data.message === 'Book updated successfully') {
            // Update the book details on the page
            const bookRow = document.querySelector(`button[data-id="${bookIdToEdit}"].editBook-btn`).closest('tr');
            bookRow.querySelector('.book-title').innerText = title;
            bookRow.querySelector('.book-author').innerText = author;
            bookRow.querySelector('.book-description').innerText = description;
            bookRow.querySelector('.book-genre').innerText = genre;
            bookRow.querySelector('.book-cover').innerText = cover;
            // Hide the modal
            $('#editBookModal').modal('hide');
          } else {
            alert('Failed to update the book');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while updating the book');
        });
      }
    });
  });
